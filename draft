explain gossip nets
  previous work
  uses
    pss
    broadcast
    extensions to semantic nets
  examples in the wild
  running example (cyclon?)
statement of intent / motivation
  point is that these networks are 
    robust to random failure 
    not well understood 
    possibly susceptible to coordinated attack
      eg cyclon poisoning
  want to build other services on top, require better knowledge of behaviour
  emergent behaviour means that experimental results are not enough to explore design space
  cf arrg for examples of theoretical results failing to meet reality
    want to understand why this happens and what can be done to improve it
  but difficult to model analytically - why?


single node metrics
  justifications 
    easy to observe in real life
    may allow ignoring dependence between nodes
    only really care about single user experience?
  indegree - load balancing 
  arrival times - randomness of network
    many algorithms assume a uniform peer selection algorithm
  for semantic nets, search distance
  for semantic nets, quality of recommendations
scheduling - random vs inorder
  fixed intervals causes ordering and non-markovian behaviour
  random scheduling, counterintuitively, is simpler to model
  cf previous model which had to assume instantaneous exchanges and had hard maths
  exponential intervals lead to a real-time markov chain which is easy to reason about
  demonstrate model by reproducing graphs from previous paper


introduce new algorithm
give global prism description
give local prism description
demonstrate equivalence
  -- this is the unsolved bit
  -- given thats its cs can probably just make a guess as to internode distributions and verify with implementation
  -- probably best to do that for now and do the proof if i have time


produce implementation
verify theoretical results


derive memory/bandwidth calculations
  mention that serious implementation would require much more bandwidth, of course
write search tool to find desired descriptions based on local prism description


extend model (hah!)
  backup cache
  block lists
  random failure
  nat traversal (ie systematic failure)
  up/down times
  semantic nets eg buddycast 2+


conclusion
  gossip algorithms effective, hard to reason about
  reasons why hard to reason about
  produced an effective, tunable and easy to model/implement algorithm
